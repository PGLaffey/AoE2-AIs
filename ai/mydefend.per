; --- Timers ---
(defconst ATTACK_TIME 300)
(defconst RETREAT_TIME 180)
(defconst TIMER_ATTACK 1)
(defconst TIMER_RETREAT 3)
; (defconst TIMER_POP_LIMIT 2)
(defconst TIMER_POP_INCREASE 2)

(defconst g-pop-cap 1)
(defconst g-pop-cap-multiplier 4)
(defconst g-attack-time 2)
(defconst g-retreat-time 3)
(defconst g-difficulty-modifier 5)

(defconst g-enemy-archers 100)
(defconst g-enemy-cav 101)
(defconst g-enemy-spear 102)

(defconst g-default-barracks-unit 200) ; Default unit if there is nothing to counter
(defconst g-default-archery-unit 201) ; Default unit if there is nothing to counter
(defconst g-default-stable-unit 202) ; Default unit if there is nothing to counter
(defconst g-default-siege-unit 203) ; Default unit if there is nothing to counter
(defconst g-barracks-unit 204) ; Currently creating unit taking counter into account
(defconst g-archery-unit 205) ; Currently creating unit taking counter into account
(defconst g-stable-unit 206) ; Currently creating unit taking counter into account
(defconst g-siege-unit 207) ; Currently creating unit taking counter into account
(defconst g-max-barracks-units-perc 208) ; Max percentage of army
(defconst g-max-archery-units-perc 209) ; Max percentage of army
(defconst g-max-stable-units-perc 210) ; Max percentage of army
(defconst g-max-siege-units-perc 211) ; Max percentage of army
(defconst g-max-barracks-units 212) ; Max number of units
(defconst g-max-archery-units 213) ; Max percentage of army
(defconst g-max-stable-units 214) ; Max percentage of army
(defconst g-max-siege-units 215) ; Max percentage of army


(defconst g-temp1 1001)
(defconst g-temp2 1002)
(defconst g-temp3 1003)
(defconst g-temp4 1004)
(defconst g-temp5 1005)

(defconst s-creation-speed-increase 0)
(defconst s-creation-speed-decrease 1)

; P1 Bank
(defconst s-bank-p1-food 100)
(defconst s-bank-p1-wood 101)
(defconst s-bank-p1-gold 102)
(defconst s-bank-p1-stone 103)
; P2 Bank
(defconst s-bank-p2-food 104)
(defconst s-bank-p2-wood 105)
(defconst s-bank-p2-gold 106)
(defconst s-bank-p2-stone 107)
; P3 Bank
(defconst s-bank-p3-food 108)
(defconst s-bank-p3-wood 109)
(defconst s-bank-p3-gold 110)
(defconst s-bank-p3-stone 111)

; ===== Event IDs =====
(defconst e-decrease-pop 1)
(defconst e-force-attack 2)
(defconst e-force-retreat 3)

; ===== Civ Constants =====
(defconst ACHAEMENIDS 46)
(defconst ATHENIANS 47)
(defconst SPARTANS 48)
(defconst SHU 49)
(defconst WU 50)
(defconst WEI 51)
(defconst JURCHENS 52)
(defconst KHITANS 53)

; ===== Game Start: Initial setup actions =====
(defrule
    (true) ; This rule runs once at the very start of the game
=>
    (chat-to-all "Scenario Attacker AI V5: The Nightmare Reborn!")
    (set-strategic-number sn-attack-intelligence 1)
    ; (set-strategic-number sn-enable-offensive-priority 1)
    (set-strategic-number sn-enable-patrol-attack 1)
    (set-strategic-number sn-percent-attack-soldiers 100)
    (set-strategic-number sn-wall-targeting-mode 1)
    (set-strategic-number sn-enable-training-queue 1)
    (set-strategic-number sn-number-explore-groups 0)
    (set-strategic-number sn-relic-return-distance 0)
    (set-strategic-number sn-do-not-scale-for-difficulty-level 1)
    (set-strategic-number sn-enable-training-queue 5)
    (set-strategic-number sn-enable-research-queue 1)

    ; (set-goal g-pop-cap 2)
    (set-goal g-pop-cap 10)
    ; (set-goal g-pop-cap-multiplier 132)
    ; (set-goal g-pop-cap-multiplier 122)
    (set-goal g-pop-cap-multiplier 130)
    (set-goal g-difficulty-modifier 100)

    (enable-timer TIMER_RETREAT 0)
    (enable-timer TIMER_POP_INCREASE 5)
    (disable-self)
)

; ----- Player Target -----
(defrule
    (or
        (player-number 4)
        (player-number 7)
    )
    (player-in-game 1)
    =>
    (set-strategic-number sn-target-player-number 1)
    (disable-self)
)
(defrule
    (not (player-in-game 1))
    =>
    (set-strategic-number sn-target-player-number 0)  
    (disable-self)  
)

(defrule
    (or
        (player-number 5)
        (player-number 6)
    )
    (player-in-game 3)
    =>
    (set-strategic-number sn-target-player-number 3)
    (disable-self)
)
(defrule
    (not (player-in-game 3))
    =>
    (set-strategic-number sn-target-player-number 0)  
    (disable-self)  
)

; ===== Player Chat Triggers =====
; ----- p1 Cashin Bank -----
(defrule ; Food
    (taunt-detected 1 3)
    => 
    (acknowledge-taunt 1 3)
    (fe-set-signal c: s-bank-p1-food c: 1)
)
(defrule ; Food
    (taunt-detected 1 4)
    => 
    (acknowledge-taunt 1 4)
    (fe-set-signal c: s-bank-p1-wood c: 1)
)
(defrule ; Food
    (taunt-detected 1 5)
    => 
    (acknowledge-taunt 1 5)
    (fe-set-signal c: s-bank-p1-gold c: 1)
)
(defrule ; Food
    (taunt-detected 1 6)
    => 
    (acknowledge-taunt 1 6)
    (fe-set-signal c: s-bank-p1-stone c: 1)
)
; ----- p2 Cashin Bank -----
(defrule ; Food
    (taunt-detected 2 3)
    =>
    (acknowledge-taunt 2 3)
    (fe-set-signal c: s-bank-p2-food c: 1)
)
(defrule ; Wood
    (taunt-detected 2 4)
    =>
    (acknowledge-taunt 2 4)
    (fe-set-signal c: s-bank-p2-wood c: 1)
)
(defrule ; Gold
    (taunt-detected 2 5)
    =>
    (acknowledge-taunt 2 5)
    (fe-set-signal c: s-bank-p2-gold c: 1)
)
(defrule ; Stone
    (taunt-detected 2 6)
    =>
    (acknowledge-taunt 2 6)
    (fe-set-signal c: s-bank-p2-stone c: 1)
)
; ----- p3 Cashin Bank -----
(defrule ; Food
    (taunt-detected 3 3)
    =>
    (acknowledge-taunt 3 3)
    (fe-set-signal c: s-bank-p3-food c: 1)
)
(defrule ; Wood
    (taunt-detected 3 4)
    =>
    (acknowledge-taunt 3 4)
    (fe-set-signal c: s-bank-p3-wood c: 1)
)
(defrule ; Gold
    (taunt-detected 3 5)
    =>
    (acknowledge-taunt 3 5)
    (fe-set-signal c: s-bank-p3-gold c: 1)
)
(defrule ; Stone
    (taunt-detected 3 6)
    =>
    (acknowledge-taunt 3 6)
    (fe-set-signal c: s-bank-p3-stone c: 1)
)

; ----- Difficulty Mutliplier ----- 
(defrule ; Decrease difficulty
    (or
        (taunt-detected any-human 45)
        (taunt-detected any-computer 45)
    )
    => 
    (acknowledge-taunt any-human 45)
    (acknowledge-taunt any-computer 45)
    ; Reset Difficulty
    (up-modify-goal g-pop-cap c:* 100)
    (up-modify-goal g-pop-cap g:/ g-difficulty-modifier) 
    ; Set difficulty 
    (up-modify-goal g-difficulty-modifier c:- 10)
    (up-modify-goal g-pop-cap g:* g-difficulty-modifier)
    (up-modify-goal g-pop-cap c:/ 100)
    (fe-set-signal c: s-creation-speed-increase c: 1)
    (up-chat-data-to-all "New difficulty is %d percent" g: g-difficulty-modifier)
)
(defrule ; Increase difficulty
    (or
        (taunt-detected any-human 31)
        (taunt-detected any-computer 31)
    )
    => 
    (acknowledge-taunt any-human 31)
    (acknowledge-taunt any-computer 31)
    ; Reset Difficulty
    (up-modify-goal g-pop-cap c:* 100)
    (up-modify-goal g-pop-cap g:/ g-difficulty-modifier) 
    ; Set difficulty 
    (up-modify-goal g-difficulty-modifier c:+ 10)
    (up-modify-goal g-pop-cap g:* g-difficulty-modifier)
    (up-modify-goal g-pop-cap c:/ 100)
    (fe-set-signal c: s-creation-speed-decrease c: 1)
    (up-chat-data-to-all "New difficulty is %d percent" g: g-difficulty-modifier)
)


; ===== Event Trigger ======
(defrule ; Change phase 
    (game-time >= 6120)
    =>
    (set-strategic-number sn-target-player-number -1)
    (set-strategic-number sn-wall-targeting-mode 0)
    (set-goal g-default-siege-unit trebuchet)
    (set-goal g-pop-cap 300)
    (disable-timer TIMER_POP_INCREASE)
    (attack-now)
    (disable-self)
)
(defrule
    (event-detected trigger e-decrease-pop)
    =>
    (acknowledge-event trigger e-decrease-pop)
    (up-modify-goal g-pop-cap c:- 50)
)

(defrule ; Force Attack
    (event-detected trigger e-force-attack)
    =>
    (acknowledge-event trigger e-force-attack)
    (disable-timer TIMER_RETREAT)
    (disable-timer TIMER_ATTACK)
    (up-set-timer c: TIMER_ATTACK c: 1)
)

(defrule ; Force Retreat
    (event-detected trigger e-force-retreat)
    =>
    (acknowledge-event trigger e-force-retreat)
    (disable-timer TIMER_RETREAT)
    (disable-timer TIMER_ATTACK)
    (up-set-timer c: TIMER_RETREAT c: 1)
)


; ===== Attack Logic: Attack then Retreat =====
(defrule ; Retreat
    (timer-triggered TIMER_RETREAT)
    =>
    (disable-timer TIMER_RETREAT)
    (set-strategic-number sn-target-player-number -1)
    ; (set-strategic-number sn-number-attack-groups 0)
    ; (set-strategic-number sn-percent-attack-soldiers 0)
    (up-reset-unit c: -1)
    (up-reset-attack-now)
    (up-update-targets)
    (up-retreat-now)
    (generate-random-number RETREAT_TIME)
    (up-get-fact random-number 0 g-retreat-time)
    (up-modify-goal g-retreat-time c:+ RETREAT_TIME)
    (up-chat-data-to-all "Retreating for %d seconds" g: g-retreat-time)
    (up-set-timer c: TIMER_ATTACK g: g-retreat-time)
)
(defrule ; Attack
    (timer-triggered TIMER_ATTACK)
    =>
    (disable-timer TIMER_ATTACK)
    (set-strategic-number sn-target-player-number 0)
    (set-strategic-number sn-number-attack-groups 500)
    (set-strategic-number sn-percent-attack-soldiers 100)
    (generate-random-number ATTACK_TIME)
    (up-get-fact random-number 0 g-attack-time)
    (up-modify-goal g-attack-time c:+ ATTACK_TIME)
    (up-chat-data-to-all "Attacking for %d seconds" g: g-attack-time)
    (up-set-timer c: TIMER_RETREAT g: g-attack-time)
)

; ===== Train Units =====
; ----- Set Pop Limits for Unit Types -----
(defrule
    (timer-triggered TIMER_POP_INCREASE)
    => 
    (up-modify-goal g-pop-cap g:* g-pop-cap-multiplier)
    (up-modify-goal g-pop-cap c:/ 100)
    ; (up-chat-data-to-all "New pop cap %d" g: g-pop-cap)

    (up-modify-goal g-max-barracks-units g:= g-max-barracks-units-perc)
    (up-modify-goal g-max-barracks-units g:* g-pop-cap)
    (up-modify-goal g-max-barracks-units c:/ 100)
    ; (up-chat-data-to-all "Barracks Target %d" g: g-max-barracks-units)

    (up-modify-goal g-max-archery-units g:= g-max-archery-units-perc)
    (up-modify-goal g-max-archery-units g:* g-pop-cap)
    (up-modify-goal g-max-archery-units c:/ 100)
    ; (up-chat-data-to-all "Archery Target %d" g: g-max-archery-units)

    (up-modify-goal g-max-stable-units g:= g-max-stable-units-perc)
    (up-modify-goal g-max-stable-units g:* g-pop-cap)
    (up-modify-goal g-max-stable-units c:/ 100)
    ; (up-chat-data-to-all "Stable Target %d" g: g-max-stable-units)

    (up-modify-goal g-max-siege-units g:= g-max-siege-units-perc)
    (up-modify-goal g-max-siege-units g:* g-pop-cap)
    (up-modify-goal g-max-siege-units c:/ 100)
    ; (up-chat-data-to-all "Siege Target %d" g: g-max-siege-units)

    ; (research ri-conscription)
    (disable-timer TIMER_POP_INCREASE)
    (enable-timer TIMER_POP_INCREASE 255)
    ; (enable-timer TIMER_POP_INCREASE 400)
)

; ----- Default Unit Creation -----
(defrule
    (unit-type-count-total infantry-class g:< g-max-barracks-units)
    ; (unit-count-total g:< g-pop-cap)
    =>
    ; (up-chat-data-to-all "Creating %d" g: g-default-barracks-unit)
    (up-train 0 g: g-default-barracks-unit)
)

(defrule
    (unit-type-count-total archery-class g:< g-max-archery-units)
    (unit-type-count-total cavalry-archer-class g:< g-max-archery-units)
    ; (unit-count-total g:< g-pop-cap)
    =>
    (up-train 0 g: g-default-archery-unit)
)
(defrule
    (unit-type-count-total cavalry-class g:< g-max-stable-units)
    (unit-type-count-total scout-cavalry-line g:< g-max-stable-units)
    ; (unit-count-total g:< g-pop-cap)
    =>
    ; (up-chat-data-to-all "Creating %d" g: g-default-stable-unit)
    (up-train 0 g: g-default-stable-unit)
)
(defrule
    (unit-type-count-total siege-weapon-class g:< g-max-siege-units)
    ; (unit-count-total g:<= g-pop-cap)
    =>
    (up-train 0 g: g-default-siege-unit)
)

; ===== Research Unit Techs =====
(defrule ; Feudal Age Techs
    (current-age == feudal-age)
    =>
    (research ri-man-at-arms)
    (research ri-arson)
    (research ri-bloodlines)
    (research ri-conscription)
    (up-modify-goal g-pop-cap c:* 100)
    (up-modify-goal g-pop-cap c:/ 150)
    (disable-self)
)

(defrule ; Castle Age Techs
    (current-age == castle-age)
    =>
    (research my-unique-research)
    (research ri-squires)
    (research 875) ; Gambesons
    (research ri-crossbow)
    (research ri-elite-skirmisher)
    (research ri-thumb-ring)
    (research ri-long-swordsman)
    (research ri-pikeman)
    (research ri-eagle-warrior)
    (research ri-light-cavalry)
    (research ri-husbandry)
    (up-modify-goal g-pop-cap c:* 100)
    (up-modify-goal g-pop-cap c:/ 150)
    (disable-self)
)

(defrule ; Imperial Age Techs
    (current-age == imperial-age)
    =>
    (research my-second-unique-research)
    (research ri-arbalest)
    (research ri-heavy-cavalry-archer)
    (research ri-elite-elephant-archer)
    (research ri-parthian-tactics)
    (research ri-two-handed-swordsman)
    (research ri-halberdier)
    (research ri-elite-eagle-warrior)
    (research ri-hussar)
    (research ri-cavalier)
    (research ri-heavy-camel)
    (research 715) ; Elite Step Lancer
    (research ri-capped-ram)
    (research 257) ; Onager
    (research my-unique-unit-upgrade)
    (research my-second-unique-research)
    (research 457) ; Perfusion for Goths
    (up-modify-goal g-pop-cap c:* 100)
    (up-modify-goal g-pop-cap c:/ 150)
    (disable-self)
)
(defrule
    (research-completed ri-two-handed-swordsman)
    =>
    (research ri-champion)
    (disable-self)
)
(defrule
    (research-completed ri-cavalier)
    =>
    (research ri-paladin)
    (disable-self)
)
(defrule
    (research-completed ri-capped-ram)
    =>
    (research 255) ; Siege Ram
    (disable-self)
)
(defrule 
    (research-completed 257) ; Onager
    =>
    (research 320) ; Siege Onager
    (disable-self)
)
(defrule
    (research-available ri-conscription)
    =>
    (research ri-conscription)
)

; ==== Civ Pick - Armenians Override =====
#load-if-defined ARMENIANS-CIV
(load "mydefend/armenians")
#end-if
; ==== Civ Pick - Aztecs Override =====
#load-if-defined AZTEC-CIV
(load "mydefend/aztecs")
#end-if
; ==== Civ Pick - Bengalis Override =====
#load-if-defined BENGALIS-CIV
(load "mydefend/bengalis")
#end-if
; ==== Civ Pick - Berbers Override =====
#load-if-defined BERBERS-CIV
(load "mydefend/berbers")
#end-if
; ==== Civ Pick - Bohemians Override =====
#load-if-defined BOHEMIANS-CIV
(load "mydefend/bohemians")
#end-if
; ==== Civ Pick - Britons Override =====
#load-if-defined BRITON-CIV
(load "mydefend/britons")
#end-if
; ==== Civ Pick - Bulgarians Override =====
#load-if-defined BULGARIANS-CIV
(load "mydefend/bulgarians")
#end-if
; ==== Civ Pick - Burmese Override =====
#load-if-defined BURMESE-CIV
(load "mydefend/burmese")
#end-if
; ==== Civ Pick - Byzantines Override =====
#load-if-defined BYZANTINE-CIV
(load "mydefend/byzantines")
#end-if
; ==== Civ Pick - Celts Override =====
#load-if-defined CELTIC-CIV
(load "mydefend/celts")
#end-if
; ==== Civ Pick - Chinese Override =====
#load-if-defined CHINESE-CIV
(load "mydefend/chinese")
#end-if
; ==== Civ Pick - Cumans Override =====
#load-if-defined CUMANS-CIV
(load "mydefend/cumans")
#end-if
; ==== Civ Pick - Dravidians Override =====
#load-if-defined DRAVIDIANS-CIV
(load "mydefend/dravidians")
#end-if
; ==== Civ Pick - Ethiopians Override =====
#load-if-defined ETHIOPIAN-CIV
(load "mydefend/ethiopians")
#end-if
; ==== Civ Pick - Franks Override =====
#load-if-defined FRANKISH-CIV
(load "mydefend/franks")
#end-if
; ==== Civ Pick - Georgians Override =====
#load-if-defined GEORGIANS-CIV
(load "mydefend/georgians")
#end-if
; ==== Civ Pick  - Goth Override =====
#load-if-defined GOTHIC-CIV
(load "mydefend/goths")
#end-if
; ==== Civ Pick - Gurjaras Override =====
#load-if-defined GURJARAS-CIV
(load "mydefend/gurjaras")
#end-if
; ==== Civ Pick - Huns Override =====
#load-if-defined HUN-CIV
(load "mydefend/huns")
#end-if
; ==== Civ Pick - Hindustanis Override =====
#load-if-defined INDIAN-CIV
(load "mydefend/hindustanis")
#end-if
; ==== Civ Pick - Incas Override =====
#load-if-defined INCAN-CIV
(load "mydefend/inca")
#end-if
; ==== Civ Pick - Italians Override =====
#load-if-defined ITALIAN-CIV
(load "mydefend/italians")
#end-if
; ==== Civ Pick - Japanese Override =====
#load-if-defined JAPANESE-CIV
(load "mydefend/japanese")
#end-if
; ==== Civ Pick - Jurchens Override =====
#load-if-defined JURCHENS-CIV
(load "mydefend/jurchens")
#end-if
; ==== Civ Pick - Khitans Override =====
#load-if-defined KHITANS-CIV
(load "mydefend/khitans")
#end-if
; ==== Civ Pick - Khmer Override =====
#load-if-defined KHMER-CIV
(load "mydefend/khmer")
#end-if
; ==== Civ Pick - Koreans Override =====
#load-if-defined KOREAN-CIV
(load "mydefend/koreans")
#end-if
; ==== Civ Pick - Lithuanians Override =====
#load-if-defined LITHUANIANS-CIV
(load "mydefend/lithuanians")
#end-if
; ==== Civ Pick - Magyars Override =====
#load-if-defined MAGYAR-CIV
(load "mydefend/magyars")
#end-if
; ==== Civ Pick - Malay Override =====
#load-if-defined MALAY-CIV
(load "mydefend/malay")
#end-if
; ==== Civ Pick - Malians Override =====
#load-if-defined MALIAN-CIV
(load "mydefend/malians")
#end-if
; ==== Civ Pick - Mayan Override =====
#load-if-defined MAYAN-CIV
(load "mydefend/mayan")
#end-if
; ==== Civ Pick - Mongols Override =====
#load-if-defined MONGOL-CIV
(load "mydefend/mongols")
#end-if
; ==== Civ Pick - Persians Override =====
#load-if-defined PERSIAN-CIV
(load "mydefend/persians")
#end-if
; ==== Civ Pick - Poles Override =====
#load-if-defined POLES-CIV
(load "mydefend/poles")
#end-if
; ==== Civ Pick - Portuguese Override =====
#load-if-defined PORTUGUESE-CIV
(load "mydefend/portuguese")
#end-if
; ==== Civ Pick - Romans Override =====
#load-if-defined ROMANS-CIV
(load "mydefend/romans")
#end-if
; ==== Civ Pick - Saracens Override =====
#load-if-defined SARACEN-CIV
(load "mydefend/saracens")
#end-if
; ==== Civ Pick - Shu Override =====
#load-if-defined 49
(load "mydefend/shu")
#end-if
; ==== Civ Pick - Sicilians Override =====
#load-if-defined SICILIANS-CIV
(load "mydefend/sicilians")
#end-if
; ==== Civ Pick - Slavs Override =====
#load-if-defined SLAVIC-CIV
(load "mydefend/slavs")
#end-if
; ==== Civ Pick - Spanish Override =====
#load-if-defined SPANISH-CIV
(load "mydefend/spanish")
#end-if
; ==== Civ Pick - Tatars Override =====
#load-if-defined TATARS-CIV
(load "mydefend/tatars")
#end-if
; ==== Civ Pick - Teutons Override =====
#load-if-defined TEUTONIC-CIV
(load "mydefend/teutons")
#end-if
; ==== Civ Pick - Turks Override =====
#load-if-defined TURKISH-CIV
(load "mydefend/turks")
#end-if
; ==== Civ Pick - Vietnamese Override =====
#load-if-defined VIETNAMESE-CIV
(load "mydefend/vietnamese")
#end-if
; ==== Civ Pick - Viking Override =====
#load-if-defined VIKING-CIV
(load "mydefend/vikings")
#end-if
; ==== Civ Pick - Wei Override =====
#load-if-defined WEI-CIV
(load "mydefend/wei")
#end-if
; ==== Civ Pick - Wu Override =====
#load-if-defined WU-CIV
(load "mydefend/wu")
#end-if